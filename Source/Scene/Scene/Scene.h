#pragma once

#include "..\\..\\GameBase.h"

#include <stack>

//前方参照
class Scene;

//シーンデータクラス
class SceneData {
public:

	//シーン定数（GameData.hで定義　Common::SCENEE_○○）
	int m_scene;

	//サブシーン（シーンの途中で呼ばれ、元のシーンへ戻るようなシーン）かどうか
	bool m_bSubScene;

	//サブシーンへ飛ぶ場合、前のシーンへのポインタを格納しておく
	Scene* m_pPrevScene;

	//=============================================================================
	// コンストラクタ
	//=============================================================================
	SceneData();

	//=============================================================================
	// データのセット
	// 引　数：const int    シーン定数
	// 　　　　const bool   サブシーンかどうか
	// 　　　　const Scene* サブシーンへ飛ぶ場合に前のシーンのポインタを格納する
	//=============================================================================
	void Set(const int scene, const bool bSubScene = false, Scene* const pPrevScene = nullptr);

	//=============================================================================
	// 現在のシーンの取得
	// 戻り値：int シーン定数
	//=============================================================================
	int GetNowScene() const;
};

class Scene
{
public:

	//シーン構造体
	static SceneData m_nowSceneData;  //現在のシーン
	static SceneData m_prevSceneData; //前のシーン

	//サブシーンのためのスタック
	static std::stack<SceneData> m_stkScene;

	//=============================================================================
	// コンストラクタ
	// 引　数：Engine* エンジンクラスのアドレス
	//=============================================================================
	Scene();

	//=============================================================================
	// 仮想デストラクタ
	//=============================================================================
	virtual ~Scene();

	//=============================================================================
	// Run関数の実行時に１度だけ呼び出される開始処理関数（純粋仮想関数）
	//=============================================================================
	virtual void Start() = 0;

	//=============================================================================
	// Run関数内で実行される更新処理用関数（純粋仮想関数）
	//=============================================================================
	virtual void Update() = 0;

	//=============================================================================
	// Run関数内で実行される描画処理用関数（純粋仮想関数）
	//=============================================================================
	virtual void Draw() = 0;

	//=============================================================================
	// Run関数内で実行される終了処理用関数（仮想関数）
	//=============================================================================
	virtual void Exit();

#ifdef USE_IMGUI
	//=============================================================================
	// Run関数内で実行されるImGuiフレーム処理用関数（仮想関数）
	//=============================================================================
	virtual void ImGuiFrameProcess();
#endif

	//=============================================================================
	// サブシーンから戻った際に終了フラグを戻す関数
	// 備　考：Game.cppのRun関数内でしか使わないので呼び出さない事
	//=============================================================================
	void ReturnSubScene();

	//=============================================================================
	// シーン処理の実行
	//=============================================================================
	bool Run();

protected:

	//複数のシーンで共用するデータ構造体
	static Common::CommonData m_gameData;

	//開始フラグ
	bool m_bStart;

	//終了フラグ
	bool m_bEnd;
};